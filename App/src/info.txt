PROPS

STATE: variables locales dentro de un componentes que podemos controlas atraves de un render

CICLO DE VIDA: son todos los estadios que pueden pasar un componente 
mount
costructor(props){
    this.state = {
        nombre : "Fran"
    }
}
render()
componentDidMount()

udpdate 

unmount


HOOKS: Todos los hooks son funciones ejecutadas y cada uno hace algo distinto. 
Se tienen que ejecutar siempre en el mismo orden
,es decir que no puedo teenrlos en condicionales y siempre tienen que estar adentro de una 
funcion

-useState
-useEffect
-useContext 
-useCallback
-useMemo
-useRef
-useReducer
-useLayoutEffect
-use


//Los componrentes se van a volver a rendedizar cuando cambia su
//estado o sus props. Tamb cuando su padre se vuelva a redibujar.
//Cada reejecucion de un componente implica que se inicia un nuevo ciclo de vida
//
//USE EFFECT: efecto secundario,se usa para pedir cosas a una api, inicializar
//temporarizadores y mostrarlo en pantalla 

//async 
//fetch-setTimeout-setInterval-cache-promise-eventos

//Promesa. Operacion que dura en el tiempo. Va a tener propiedades:estado(pending-
//fullfiled- rejected)- value
//sacan los callback of hell(Funcion dentro de otra) o pyramid
//Las promesas dan un objetos

// const operacion = new Promise((resolve,reject)=>{
//     //aca dentro va la operacion que tarda en el tiempo
//     setTimeout(() => {
//         // console.log('Hola');
//         const pedido_a_bd = ["Fran","Hola"]
//         resolve(pedido_a_bd);
//     }, 2000);
// })
// operacion.then((array_de_usuarios)=>{
//     console.log(array_de_usuarios)
//     console.log('Termino bien la promesa');
// })
// operacion.then(()=>{
//     console.log("Termino la promesa bien")
// }); //termina bien
// operacion.catch(()=>{
//     console.log("Termino la promesa mal")
// }); //termina mal


//Promise + Fetch
//obj que adentro tiene prop, que esa prop 
//triggers(eventos)async - timers(contadores)-request(pedidos)


//CLIENTE

//metodo(verbo) - URL - version
//headers
//body

//SERVIDOR
//version - status - mensaje
//headers
//body

//METODOS: representa la intencion del cliente(GET, POST,PUT, PATCH,DELETE  )
//URL: 

//FETCH: API WEB(AJAX)




SPA= sigle page application

BrowserRouter: History API|
HashRouter: Location API
MemoryRouter: una app que no esta en entorno navegador
StaticRouter: SSR(server side rendering)


Link/NavLink: Genera un link sin recarga
Route: 